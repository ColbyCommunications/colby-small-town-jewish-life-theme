@mixin bust-out {
    margin: 0 calc(50% - 50vw);
    width: 100vw !important;
}

@mixin aspect-ratio($width, $height) {
	position: relative;
	&:before {
		display: block;
		content: "";
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}
	> .content {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
}

@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
@mixin box-shadow($shadow...) {
	-webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
	        box-shadow: $shadow;
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}

@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
            transform: $transforms;
}

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes: "-webkit", "-moz", "-ms", "-o", "";

	@each $prefix in $prefixes {
		#{$prefix}-transition: $transition;
	}

	transition: $transition;
}

// --------------------------------------------------------
// arrows
// --------------------------------------------------------
// $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// $color: hex, rgb or rbga
// $size: px or em
// @example
// .element{
//     @include arrow(top, #000, 50px);
// }
@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
    	border-right: $size solid transparent;
    	border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
    	border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
    	border-right: $size solid $color;
    	border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
}

//
// Flexbox
// Mixins provided by: https://github.com/mastastealth/sass-flex-mixin/blob/master/_flex.scss
//

// DISPLAY FLEX
// Values: flex | inline-flex
// Default: flex
// USAGE: @include flexbox(flex);
@mixin flexbox($value: flex) {
	@if $value == inline-flex {
		display: -webkit-inline-box;
		display: -ms-inline-flexbox;
		display: inline-flex;
	} @else {
		display: -webkit-box;
		display: -ms-flexbox;
		display: flex;
	}
}

// FLEXBOX WRAP
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
// USAGE: @include flex-wrap(nowrap)
@mixin flex-wrap($value: nowrap) {
	-ms-flex-wrap: $value;
	flex-wrap: $value;
}

// FLEXBOX DIRECTION
// Values: row | row-reverse | column | column-reverse
// Default: row
// USAGE: @include flex-direction(row)
@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// FLEXBOX JUSTIFY CONTENT
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flexstart
// USAGE: @include justify-content(flex-start)
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	justify-content: $value;
}

// FLEXBOX ALIGN ITEMS
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
// USAGE: @include align-items(stretch)
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-ms-grid-row-align: $value;
	align-items: $value;
}

// FLEXBOX ALIGN SELF
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
// USAGE: @include align-self(auto)
@mixin align-self($value: auto) {
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

// FLEXBOX FLEX (shorthand)
// Values: Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
// USAGE: @include flex(1, 1, auto)
@mixin flex($fg: 1, $fs: null, $fb: null) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;
	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}
	-webkit-box-flex: $fg-boxflex;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

// FLEXBOX GROW
// Values: positive integer
// Default: 0
// USAGE: @include flex-grow(0)
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

// FLEXBOX SHRINK
// Values: positive integer
// Default: 1
// USAGE: @include flex-shrink(1)
@mixin flex-shrink($int: 1) {
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

// FLEXBOX BASIS
// Values: An absolute <length>, a <percentage> of the parent flex container's main size property, or the keyword auto. Negative values are invalid.
// Default: auto
// USAGE: @include flex-basis($width)
@mixin flex-basis($width: auto) {
	-ms-flex-preferred-size: $width;
	flex-basis: $width;
}

// FLEXBOX ORDER
// Values: integer
// Default: 0
// USAGE: @include order(0)
@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-ms-flex-order: $int;
	order: $int;
}
